"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.healthCheck = exports.updateResource = exports.getResource = exports.deleteResource = exports.createResource = exports.listResources = void 0;
const client_gen_1 = require("./client.gen");
/**
 * List resources
 * Retrieve a paginated list of resources
 */
const listResources = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resources',
        ...options
    });
};
exports.listResources = listResources;
/**
 * Create a new resource
 * Create a new resource with the provided data
 */
const createResource = (options) => {
    return (options.client ?? client_gen_1.client).post({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
exports.createResource = createResource;
/**
 * Delete a resource
 * Remove a resource from the system
 */
const deleteResource = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resources/{id}',
        ...options
    });
};
exports.deleteResource = deleteResource;
/**
 * Get a resource by ID
 * Retrieve detailed information about a specific resource
 */
const getResource = (options) => {
    return (options.client ?? client_gen_1.client).get({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resources/{id}',
        ...options
    });
};
exports.getResource = getResource;
/**
 * Update a resource
 * Update an existing resource with new data
 */
const updateResource = (options) => {
    return (options.client ?? client_gen_1.client).put({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resources/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
exports.updateResource = updateResource;
/**
 * Health check
 * Check the health status of the service
 */
const healthCheck = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        url: '/health',
        ...options
    });
};
exports.healthCheck = healthCheck;

"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorSchema = exports.PolicePatrolListSchema = exports.PolicePatrolUpdateSchema = exports.PolicePatrolCreateSchema = exports.PolicePatrolSchema = void 0;
exports.PolicePatrolSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'Unique ID for the police patrol'
        },
        caseId: {
            type: 'string',
            description: 'Case ID'
        },
        location: {
            type: 'string',
            description: 'Location of the police patrol'
        },
        startedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol started'
        },
        endedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol ended'
        },
        patrolType: {
            enum: ['car', 'foot', 'bike', 'horse'],
            description: 'Type of the police patrol'
        },
        callType: {
            type: 'string',
            description: 'Callout type'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol was created'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol was last updated'
        }
    },
    required: ['id', 'location', 'startedAt', 'patrolType', 'createdAt', 'updatedAt']
};
exports.PolicePatrolCreateSchema = {
    type: 'object',
    properties: {
        caseId: {
            type: 'string',
            description: 'Case ID'
        },
        location: {
            type: 'string',
            description: 'Location of the police patrol'
        },
        startedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol starts'
        },
        endedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol ended'
        },
        patrolType: {
            enum: ['car', 'foot', 'bike', 'horse'],
            description: 'Type of the police patrol'
        },
        callType: {
            type: 'string',
            description: 'Callout type'
        }
    },
    required: ['location', 'startedAt', 'patrolType']
};
exports.PolicePatrolUpdateSchema = {
    type: 'object',
    properties: {
        caseId: {
            type: 'string',
            description: 'Case ID'
        },
        location: {
            type: 'string',
            description: 'Location of the police patrol'
        },
        startedAt: {
            type: 'string',
            format: 'date-time',
            description: "When the police patrol starts, can't be updated if the patrol has already started"
        },
        endedAt: {
            type: 'string',
            format: 'date-time',
            description: 'When the police patrol ends'
        },
        callType: {
            type: 'string',
            description: 'Callout type'
        }
    }
};
exports.PolicePatrolListSchema = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PolicePatrol'
            },
            description: 'List of police patrols'
        },
        total: {
            type: 'number',
            description: 'Total number of police patrols matching the query'
        },
        page: {
            type: 'number',
            description: 'Current page number'
        },
        page_size: {
            type: 'number',
            description: 'Number of items per page'
        }
    },
    required: ['items', 'total', 'page', 'page_size']
};
exports.ErrorSchema = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    description: 'Error code'
                },
                message: {
                    type: 'string',
                    description: 'Human-readable error message'
                },
                details: {
                    type: 'object',
                    additionalProperties: true,
                    description: 'Additional error details'
                }
            },
            required: ['code', 'message']
        }
    },
    required: ['error']
};
